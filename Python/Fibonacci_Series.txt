				Fibonacci Series


	Iterative Approach

â˜… Initialize variables a,b to 1
â˜… Initialize for loop in range[1,n) # n exclusive
â˜… Compute next number in series; total = a+b
â˜… Store previous value in b
â˜… Store total in a



	Recursive Approach

â˜… If n equals 1 or 0; return 1
â˜… Else return fib(n-1) + fib(n-2)



	Dynamic Programming Approach

â˜… Initialize an array arr of size n to zeros
â˜… If n equals 0 or 1; return 1 Else
â˜… Initalize arr[0] and arr[1] to 1
â˜… Run for loop in range[2,num]
â˜… Compute the value arr[I]=arr[I-1] +arr[I-2]
â˜… The array has the sequence computed till n




ðŸŽ– The sum of two elements defines the next

a, b = 0, 1
while a < 15:
    print(a)
    a, b = b, a + b


output: 0 1 1 2 3 5 8 13 



ðŸŒ¹
def fib_iter(n):
    a=1
    b=1
    if n==1:
        print('0')
    elif n==2:
        print('0', '1')
    else:
        print("Iterative Approach: ", end=' ')
        print('0', a, b, end=' ')
        for i in range(n-3):
            total = a + b
            b=a
            a= total
            print(total, end=' ')
        print()
        return b



ðŸŒ¹
def fib_rec(n):
    if n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        x = fib_rec(n-1)
        # the new element the sum of the last two elements
        x.append(sum(x[:-3:-1]))
        return x




ðŸŒ¹
def fib_dp(num):
    arr = [0, 1]
    print("Dynamic Programming Approach: ", end= ' ')
    if num==1:
        print('0')
    elif num==2:
        print('[0,','1]')
    else:
        while(len(arr) < num):
            arr.append(0)
        if(num == 0 or num == 1):
            return 1
        else:
            arr[0]=0
            arr[1]=1
            for i in range(2, num):
                arr[i]=arr[i-1]+arr[i-2]
            print(arr)
            return arr[num-2]





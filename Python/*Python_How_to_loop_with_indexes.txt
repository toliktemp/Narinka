  http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/


http://www.pitt.edu/~naraehan/python3/more_on_for_loops.html


f = open('C:\states.csv', 'r')
states = open('c:\states.txt', 'w')

for line in f:
    states.write('"abc"  %s\n' % line)

f.close()
states.close()


l = ['a', 'b', 'c', 'd']
with open('outfile', 'w') as f:
    f.write('\n'.join(l))

'\n'.join(['"abc" %s' % e for e in l])


for ind,line in enumerate(l):
    print ind,line



crimefile = open('C:\states.csv', 'r')
b = crimefile.read()
l = b.splitlines()
print l[1]

states = open('c:\states.txt', 'w')
states.write('"abc"' + " " + '%s' '\n' %l[0+=])

states.close()        


listOfStuff =([a,b], [c,d], [e,f], [f,g])
for item in listOfStuff(range(2,3))
   print item



>>> doubled_odds = map(lambda n: n * 2, filter(lambda n: n % 2 == 1, numbers))
>>> doubled_odds = [n * 2 for n in numbers if n % 2 == 1]



numbers = [1, 2, 3, 4, 5]

doubled_odds = []
for n in numbers:
    if n % 2 == 1:
        doubled_odds.append(n * 2)



To this:

numbers = [1, 2, 3, 4, 5]

doubled_odds = [n * 2 for n in numbers if n % 2 == 1]


A for loop that doesn’t have an if statement:

doubled_numbers = []
for n in numbers:
    doubled_numbers.append(n * 2)
That same code written as a comprehension:

doubled_numbers = [n * 2 for n in numbers]


flattened = []
for row in matrix:
    for n in row:
        flattened.append(n)
Here’s a list comprehension that does the same thing:

flattened = [n for row in matrix for n in row]



first_letters = set()
for w in words:
    first_letters.add(w[0])
That same code written as a set comprehension:

first_letters = {w[0] for w in words}



List comprehension
Before

doubled_odds = [n * 2 for n in numbers if n % 2 == 1]
After

doubled_odds = [
    n * 2
    for n in numbers
    if n % 2 == 1
]   


listOfStuff =([a,b], [c,d], [e,f], [f,g])

for item in listOfStuff[1:3]:
    print item


colors = ["red", "green", "blue", "purple"]
for i in range(len(colors)):
    print(colors[i])


presidents = ["Washington", "Adams", "Jefferson", "Madison", "Monroe", "Adams", "Jackson"]
for i in range(len(presidents)):
    print("President {}: {}".format(i + 1, presidents[i]))


presidents = ["Washington", "Adams", "Jefferson", "Madison", "Monroe", "Adams", "Jackson"]
for num, name in enumerate(presidents, start=1):
    print("President {}: {}".format(num, name))


colors = ["red", "green", "blue", "purple"]
ratios = [0.2, 0.3, 0.1, 0.4]
for i, color in enumerate(colors):
    ratio = ratios[i]
    print("{}% {}".format(ratio * 100, color))



colors = ["red", "green", "blue", "purple"]
ratios = [0.2, 0.3, 0.1, 0.4]
for color, ratio in zip(colors, ratios):
    print("{}% {}".format(ratio * 100, color))



Loop over a single list with a regular for-in:

for n in numbers:
    print(n)
Loop over multiple lists at the same time with zip:

for header, rows in zip(headers, columns):
    print("{}: {}".format(header, ", ".join(rows)))
Loop over a list while keeping track of indexes with enumerate:

for num, line in enumerate(lines):
    print("{0:03d}: {}".format(num, line))



In Summary
If you find yourself tempted to use range(len(my_list)) or a loop counter, think about whether you can reframe your problem to allow usage of zip or enumerate (or a combination of the two).

In fact, if you find yourself reaching for enumerate, think about whether you actually need indexes at all. It’s quite rare to need indexes in Python.

If you need to loop over multiple lists at the same time, use zip
If you only need to loop over a single list just use a for-in loop
If you need to loop over a list and you need item indexes, use enumerate    



Dictionary comprehension
Before

flipped = {value: key for key, value in original.items()}
After

flipped = {
    value: key
    for key, value in original.items()
}


Summary
When struggling to write a comprehension, don’t panic. Start with a for loop first and copy-paste your way into a comprehension.

Any for loop that looks like this:

new_things = []
for ITEM in old_things:
    if condition_based_on(ITEM):
        new_things.append("something with " + ITEM)
Can be rewritten into a list comprehension like this:

new_things = ["something with " + ITEM for ITEM in old_things if condition_based_on(ITEM)]
If you can nudge a for loop until it looks like the ones above, you can rewrite it as a list comprehension.


	for Loops Over a String
for x in 'school': 
        print(x)  


	for Loops Over a Dictionary
>>> simpsons = {'Homer':36, 'Marge':35, 'Bart':10, 'Lisa':8}
>>> for s in simpsons:        # s iterates over keys in simpsons
        print(s)  


>>> for s in simpsons:              # s iterates over keys in simpsons
        print(s, simpsons[s])       # key, value  



 	
>>> len('penguin')
7 
>>> list(range(len('penguin')))
[0, 1, 2, 3, 4, 5, 6] 


>>> for i in range(len('penguin')): 
        print(i, 'penguin'[i]) 
	  
0 p
1 e
2 n
3 g
4 u
5 i
6 n


>>> list(enumerate('tiger'))        # force into list type to see what's inside
[(0, 't'), (1, 'i'), (2, 'g'), (3, 'e'), (4, 'r')] 



>>> for (i, e) in enumerate('tiger'):    # i is bound to index, e bound to each letter
        print(i, 'is the index for', e)	  

0 is the index for t
1 is the index for i
2 is the index for g
3 is the index for e
4 is the index for r 


>>> for (i, e) in enumerate([80, 95, 72, 88]):    # i is index, e is list element
        print(e, 'is at', i)	  

80 is at 0
95 is at 1
72 is at 2
88 is at 3 


>>> for x in 'school': 
        if x in 'aeiou': break      # x is a vowel! breaking out.
        print(x)  
	  
s
c
h



>>> for x in 'school': 
        print(x)  
        if x in 'aeiou': break  

s
c
h
o 


>>> for x in 'abcd': 
        for y in 'abcd': 
            print(x, y) 
        print('----')	
		
a a
a b
a c
a d
----
b a
b b
b c
b d
----
c a
c b
c c
c d
----
d a
d b
d c
d d
---- 
>>> 


>>> for (i, e) in enumerate('tiger'):    # i is bound to index, e bound to each letter
        print(i, 'is the index for', e)	  

0 is the index for t
1 is the index for i
2 is the index for g
3 is the index for e
4 is the index for r 
>>> 
>>> for (i, e) in enumerate([80, 95, 72, 88]):    # i is index, e is list element
        print(e, 'is at', i)	  

80 is at 0
95 is at 1
72 is at 2
88 is at 3 
>>> 

[
    ['a', 'a', 'a', 'a'],
    ['b', 'b', 'b', 'b', 'b'],
    ['c', 'c', 'c', 'c', 'c']
]


line_iter = iter(list_of_lines[:])
# consume first item from iterable
next(line_iter)
for index, item in enumerate(line_iter, start=1):
    list_of_lines[index][1:3] = [''.join(item[1:3])]


# Enumerate() in Python

A lot of times when dealing with iterators, we also get a need to keep a count of iterations. Python eases the programmers’ task by providing a built-in function enumerate() for this task.
Enumerate() method adds a counter to an iterable and returns it in a form of enumerate object. This enumerate object can then be used directly in for loops or be converted into a list of tuples using list() method.
Syntax:

enumerate(iterable, start=0)
Parameters:
Iterable: any object that supports iteration
Start: the index value from which the counter is 
to be started, by default it is 0 

# Python program to illustrate
# enumerate function
l1 = ["eat","sleep","repeat"]
s1 = "geek"
 
# creating enumerate objects
obj1 = enumerate(l1)
obj2 = enumerate(s1)
 
print "Return type:",type(obj1)
print list(enumerate(l1))
 
# changing start index to 2 from 0
print list(enumerate(s1,2))


Using Enumerate object in loops

# Python program to illustrate
# enumerate function in loops
l1 = ["eat","sleep","repeat"]
 
# printing the tuples in object directly
for ele in enumerate(l1):
    print ele
print
# changing index and printing separately
for count,ele in enumerate(l1,100):
    print count,ele


=========================================


book = open("/Users/tolik/Desktop/numpy.txt")
book_text = book.readlines()
len(book_text)
help(book)
book_text[0]
book_text[:11]
book.close()


http://www.pitt.edu/~naraehan/python3/string_methods1.html





